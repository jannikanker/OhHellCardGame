@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorSignalRApp.Shared;
@using System.Collections;
@using Microsoft.Extensions.Logging;
@inject NavigationManager NavigationManager

<style>
        fieldset.scheduler-border {
            border: 1px groove #ddd !important;
            padding: 0 1.4em 1.4em 1.4em !important;
            margin: 0 0 1.5em 0 !important;
            -webkit-box-shadow: 0px 0px 0px 0px #000;
            box-shadow: 0px 0px 0px 0px #000;
            border-radius: 15px;
        }

        legend.scheduler-border {
            font-size: 2.2em !important;
            font-weight: bold !important;
            text-align: left !important;
            width: auto;
            padding: 0 10px;
            border-bottom: none;
        }

        div.gallery {
            margin: 5px;
            border: 1px solid #ccc;
            float: left;
            width: 120px;
            border-radius: 15px;
        }

            div.gallery:hover {
                border: 1px solid #808080;
            }

        div.desc {
            text-align: center;
        }

    header,
    section,
    aside,
    footer {
        margin: 0 1.5% 24px 1.5%;
    }

        aside.gallery {
            float: left;
            width: 20%;
        }
        section.gameSettings {
            float: left;
            width: 80%;
        }

        section.gameSettings {
            float: left;
            width: 70%;
        }

        section.playedCards {
            float: left;
            width: 80%;
        }

        section.playerCards {
            clear: both;
            width: 80%;
        }

    footer {
        clear: both;
        margin-bottom: 0;
    }
</style>

<h1>BoerenBridge</h1>
<header class="gameSettings">
    @if (_game == null)
    {
        <input type="text" @bind="_newGameName" />
        <button class="btn btn-danger" @onclick="@NewGame">New Game</button>
        <select @bind=_selectedGame>
            <option value=_selectedGame>Game1</option>
            <option value="game2">Game2</option>
            <option value="game3">Game3</option>
            <option value="game4">Game3</option>
        </select>
        <button class="btn btn-danger" @onclick="@JoinGame">Join Game</button>
        <img src="/CardImages/back_cards-07.png" width="500" />
    }

    @if (_game != null)
    {
        <select @bind="_selectedPlayer" disabled="@(_playerSelected)">
            <option value="" selected>Select Player</option>
            @foreach (var p in _playerSelections)
            {
                <option value="@p.Id">@p.Name</option>
            };
        </select>

        <button disabled="@(_playerSelected)" class="btn btn-success" @onclick="@GetAvailablePlayers">Refresh Players</button>
        <button disabled="@(_playerSelected)" class="btn btn-success" @onclick="@SelectPlayer">Select Player</button>

        <button disabled="@(!_game.AllPlayersSignedIn || _game.GameStarted)" class="btn btn-success" @onclick="@StartGame">Start Game</button>
    }
</header>

<aside class="playcard">
        <div id="PlayColour"><img src="/CardImages/5@(_game.PlayingColour.ToString() + ".png")" width="75" /></div>
        <p>Player @_game.CurrentPlayer's turn</p>
        <hr />
     }
</aside>

<section class="playedCards">
    @if (_game != null)
    {
        <fieldset class="scheduler-border">
            @foreach (var playedCard in _game.PlayedCards)
            {

                <div class="gallery">
                    <div class="desc">
                        @if (playedCard != null)
                        {
                            if (playedCard.PlayerName == "P" + _game.PlayerToStart.ToString())
                            {
                                <div style="background-color: red"><b>@(playedCard.PlayerName)</b></div>
                            }
                            else
                            {
                                <div style="background-color:green"><b>@(playedCard.PlayerName)</b></div>
                            }
                            <div id="PlayCard_@(playedCard.PlayerName)"><img src="/CardImages/@(playedCard.Card == null ? "green_back" : playedCard.Card.Face).png" width="100" /></div>
                            <button disabled="@(!_game.ChooseWinner || (_selectedPlayer != "P1"))" @onclick="@(e => Winner(e, playedCard))">Won</button>
                        }
                        else
                        {
                            <img src="/CardImages/green_back.png" width="100" />
                        }
                    </div>
                </div>

            }
        </fieldset>
        <button disabled="@(!_game.CleanTable || (_selectedPlayer != "P1"))" class="btn btn-success" @onclick="@CleanTable">Clean Table</button>
        <hr />
    }
</section>

<section class="playerCards">
    @if (_game != null)
    {
        <h2>@_selectedPlayer</h2>

        <fieldset class="scheduler-border">
            @foreach (var card in _cards)
            {
                <div class="gallery">
                    <div class="desc">
                        <div id="P1_K@_cards.IndexOf(card).ToString()"><img src="/CardImages/@(card.Face).png" width="100" /></div>
                        <div><button disabled="@("P" + _game.CurrentPlayer != _selectedPlayer)" class="btn btn-success" @onclick="@(e => Play(e, _selectedPlayer, card))">Speel</button></div>
                    </div>
                </div>
            }
        </fieldset>
    }
</section>

<footer>
    @if (_game != null)
    {
        <button id="btnForward1" disabled="@((!_game.Rounds[0] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[0] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 1))">1</button>
        <button id="btnForward2" disabled="@((!_game.Rounds[1] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[1] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 2))">2</button>
        <button id="btnForward3" disabled="@((!_game.Rounds[2] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[2] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 3))">3</button>
        <button id="btnForward4" disabled="@((!_game.Rounds[3] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[3] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 4))">4</button>
        <button id="btnForward5" disabled="@((!_game.Rounds[4] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[4] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 5))">5</button>
        <button id="btnForward6" disabled="@((!_game.Rounds[5] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[5] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 6))">6</button>
        <button id="btnForward7" disabled="@((!_game.Rounds[6] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[6] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 7))">7</button>
        <button id="btnForward8" disabled="@((!_game.Rounds[7] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[7] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 8))">8</button>
        <br />
        <button id="btnBackward1" disabled="@((!_game.Rounds[15] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[15] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 1))">1</button>
        <button id="btnBackward2" disabled="@((!_game.Rounds[14] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[14] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 2))">2</button>
        <button id="btnBackward3" disabled="@((!_game.Rounds[13] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[13] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 3))">3</button>
        <button id="btnBackward4" disabled="@((!_game.Rounds[12] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[12] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 4))">4</button>
        <button id="btnBackward5" disabled="@((!_game.Rounds[11] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[11] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 5))">5</button>
        <button id="btnBackward6" disabled="@((!_game.Rounds[10] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[10] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 6))">6</button>
        <button id="btnBackward7" disabled="@((!_game.Rounds[9] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[9] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 7))">7</button>
        <button id="btnBackward8" disabled="@((!_game.Rounds[8] || _game.Playing) || ("P"+_game.PlayerToStart != _selectedPlayer))" class="@(_game.Rounds[8] ? "btn btn-success" : "btn btn-default")" @onclick="@(e => Shuffle(e, 8))">8</button>

        <button disabled="@(!_game.RoundReady && _selectedPlayer != "P1")" class="btn btn-success" @onclick="@NextRound">Volgende beurt</button>
    }
    </footer>


    @code {
        private HubConnection _hubConnection;
        private string _selectedPlayer;
        private string _selectedGame;
        private string _newGameName = "gameX";
        private bool _playerSelected;

        private Game _game;
        private List<Card> _cards = new List<Card>();

        private List<PlayerSelection> _playerSelections = new List<PlayerSelection>();


        protected override async Task OnInitializedAsync()
        {
            _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gameHub"))
            .WithAutomaticReconnect()
                .ConfigureLogging(logging =>
                {
                    logging.SetMinimumLevel(LogLevel.Information);
                    logging.AddConsole();
                })
            .Build();

            _hubConnection.On<Game>("NewGameCreated", (game) =>
            {
                _game = game;
                StateHasChanged();
            });

            _hubConnection.On<Game>("JoinedGame", (game) =>
            {
                _game = game;
                StateHasChanged();
            });

            _hubConnection.On<Game>("GameStarted", (game) =>
            {
                _game = game;
                StateHasChanged();
            });

            _hubConnection.On<Game>("GameResetted", (game) =>
            {
                _game = game;
                StateHasChanged();
            });

            _hubConnection.On<Game, string>("PlayerSelected", (game, signedInPlayerID) =>
            {
                _game = game;
                var index = _playerSelections.FindIndex(p => p.Id == signedInPlayerID);
                if (index > 0)
                    _playerSelections.RemoveAt(index);
                StateHasChanged();
            });

            _hubConnection.On<List<Card>, Game>("Shuffled", (cards, game) =>
            {
                _game = game;
                _cards = cards;
                _game.Playing = true;

                StateHasChanged();
            });

            _hubConnection.On<List<Card>, Game>("PlayedCard", (cards, game) =>
            {
                _game = game;
                _cards = cards;
                StateHasChanged();
            });

            _hubConnection.On<string[]>("ReturnAvailablePlayers", (rap) =>
            {
                _playerSelections = new List<PlayerSelection>();
                foreach (var p in rap)
                {
                    _playerSelections.Add(new PlayerSelection { Id = p, Name = p });
                }
                StateHasChanged();
            });

            _hubConnection.On<Game>("WinnerRegistered", (game) =>
            {
                _game = game;
                _game.ChooseWinner = false;

                StateHasChanged();
            });

            _hubConnection.On<Game>("StartNextRound", (game) =>
            {
                _game = game;
                StateHasChanged();
            });

            _hubConnection.On<Game>("CleanedTable", (game) =>
            {
                _game = game;
                StateHasChanged();
            });

            await _hubConnection.StartAsync();
        }


        private async Task NewGame()
        {
            await _hubConnection.SendAsync("NewGame", _newGameName);
        }

        private async Task JoinGame()
        {
            await _hubConnection.SendAsync("JoinGame", _selectedGame);
        }

        private async Task CleanTable()
        {
            await _hubConnection.SendAsync("CleanTable", _game.Id);
        }

        private async Task StartGame()
        {
            if (!String.IsNullOrEmpty(_selectedPlayer))
            {
                await _hubConnection.SendAsync("StartGame", _game.Id);
            }
        }

        private void NextRound()
        {
            _hubConnection.SendAsync("NextRound", _game.Id);
        }

        private Task Shuffle(MouseEventArgs e, int nrCards) =>
            _hubConnection.SendAsync("Shuffle", _game.Id, nrCards);

        private void Play(MouseEventArgs e, string player, Card card)
        {
            _hubConnection.SendAsync("PlayCard", _game.Id, _selectedPlayer, card);
        }

        private void Winner(MouseEventArgs e, PlayedCard winningCard)
        {
            _hubConnection.SendAsync("RoundWinner", _game.Id, winningCard);

        }

        private async Task SelectPlayer()
        {
            _playerSelected = true;
            await _hubConnection.SendAsync("AddToGroup", _game.Id, _selectedPlayer);
        }

        private async Task GetAvailablePlayers()
        {
            await _hubConnection.SendAsync("GetAvailablePlayers", _game.Id);
        }

        public class PlayerSelection
        {
            public string Id;
            public string Name;
        }
    }

@page "/boerenbridge/{_selectedGame}/{_selectedPlayer}"
@using Microsoft.AspNetCore.SignalR.Client
@using CardGames.Shared.Models;
@using Microsoft.Identity.Web
@using Microsoft.Extensions.Configuration

@inject NavigationManager NavigationManager
@inject ITokenAcquisition tokenHandler
@inject IConfiguration configuration;
@inject Microsoft.Extensions.Options.IOptions<GameSettings> gameSettings
@inject IStringLocalizer<UIStrings> L;


<link href="css/desktop.css" rel="stylesheet" />
<style>
    fieldset.scheduler-border-playercards {
        border: 0px groove #ddd !important;
        background-color: #022800;
        padding: 0 0 0 0 !important;
        margin: 0 auto;
        -webkit-box-shadow: 0px 10px 0px 10px #000;
        box-shadow: 0px 0px 0px 0px #000;
        border-radius: 5px;
        width: @(_cardsWidth.ToString())px;
    }
</style>


<AuthorizeView>
    <Authorized>
        @if (_game == null)
        {
            <p>@L["GameStartingUp", @_selectedGame]</p>
        }
        else
        {
            @if (!(_game.Players[GetPlayerId(_selectedPlayer)].Email == GetUserEmail().Result || GetUserEmail().Result == settings.SystemAdmin))
            {
                <p>@L["NotAuthorized"]</p>
                return;
            }
            <header>
                <div style="position: absolute; top: 148px; right: 16px;">
                    <div style="display:@_sideView">
                        <img class="playingColor" src="/CardImages/@(_game.PlayingCard.Face.ToString() + ".png")" width="80" />
                    </div>
                </div>
                <h3>@L["Welcome", @context.User.Identity.Name.Split(" ")[0]] @(IsGameController() ? "✏️" : "")</h3>
                <h5 class="active">@_game.Status</h5>
                <button class="btn btn-success" @onclick="() => OpenScoreBoard()">Score</button>
                <button class="btn btn-success" @onclick="() => OpenTopScoreBoard()">Top Scores</button>
                <button class="btn btn-success" disabled="@(!_game.GameOver)" @onclick="() => OpenGamePlayedCards()">History</button>
                <button class="btn btn-success" @onclick="() => OpenLastPlayedCards()">Last</button>
                <button class="btn btn-success" @onclick="() => OpenTrump()">@(GetColourChar(_game.PlayingCard.Colour.ToString()))</button>
                <button id="btnShuffle"
                        disabled="@((!_game.GameStarted || _game.Playing || _game.Shuffled || _game.GameOver) || (_game.PlayerToStartObj.Id != _selectedPlayer))"
                        class="btn btn-success"
                        @onclick="@(e => Shuffle())">
                    @L["Shuffle"]
                    @if (_game.CurrentRound < 8)
                    {
                        <b> ( @((_game.CurrentRound + 1).ToString()) )</b>
                    }
                    else
                    {
                        <b> ( @((16 - _game.CurrentRound).ToString()) )</b>
                    }
                </button>

                <button class="btn btn-success" @onclick="@ToggleSideView"><img class="playingColor" src="/CardImages/@(_game.PlayingCard.Face.ToString() + ".png")" width="10" /></button>
                <button style="display:@(IsGameController() ? "inline" : "none")"
                        disabled="@(!_game.CleanTable || !IsGameController())"
                        class="btn btn-success" @onclick="@CleanTable"
                        title="@L["CleanTableText"]">
                    @L["CleanTable"]
                </button>
                <button style="display: @(IsGameController() ? "inline" : "none")"
                        disabled="@(!_game.RoundReady || _game.GameOver || !IsGameController())"
                        class="btn btn-success" @onclick="@NextRound"
                        title="@L["NextRoundText"]">
                    @L["NextRound"]
                </button>

                <br />
                @if (!_game.Rounds[_game.CurrentRound].AllBetsPlaced)
                {
                    for (int bet = 0; bet <= _game.Rounds[_game.CurrentRound].NrCards; bet++)
                    {
                        //Define if player is last and what bet is not allowed
                        var lastBetter = _game.PlayerToStart - 1;
                        if (lastBetter < 0)
                            lastBetter = _game.NrPlayers - 1;

                        var notAllowed = false;

                        if (_game.CurrentPlayer == lastBetter)
                        {
                            var sum = 0;
                            for (int b = 0; b < _game.NrPlayers; b++)
                            {
                                if (_game.Rounds[_game.CurrentRound].Bets[b] > -1)
                                {
                                    sum += _game.Rounds[_game.CurrentRound].Bets[b];
                                }
                            }
                            var betNotAllowed = _game.Rounds[_game.CurrentRound].NrCards - sum;
                            if (bet == betNotAllowed)
                            {
                                notAllowed = true;
                            }
                        }

                        var localBetVar = bet;
                        <button class=@(notAllowed && _game.CurrentPlayerObj.Id == _selectedPlayer ? "btn btn-outline-danger" : "btn btn-outline-success")
                                disabled="@(notAllowed || !_game.Shuffled || _game.Rounds[_game.CurrentRound].Bets[GetPlayerId(_selectedPlayer)] > -1 || (_game.CurrentPlayerObj.Id != _selectedPlayer))"
                                @onclick="@(e => PlaceBet(e, localBetVar.ToString()))">
                            @(notAllowed && _game.CurrentPlayerObj.Id == _selectedPlayer ? "X" : bet.ToString())
                        </button>
                    }
                }

                @if (string.IsNullOrEmpty(_selectedPlayer))
                {
                    <select @bind="_selectedPlayer" disabled="@(_playerSelected)">
                        <option value="" selected>Select Player</option>
                        @foreach (var p in _playerSelections)
                        {
                            <option selected="@(p.Id == _selectedPlayer ? true : false)" value="@p.Id">@p.Name</option>
                        };
                    </select>
                    <button disabled="@(_playerSelected)" class="btn btn-success" @onclick="@GetAvailablePlayers">Refresh Players</button>
                    <button disabled="@(_playerSelected)" class="btn btn-success" @onclick="@SelectPlayer">Select Player</button>
                }

                @if (IsGameController() && !_game.GameStarted)
                {
                    <button style="visibility:@(_game.GameStarted ? "hidden" : "visible")" disabled="@(!_game.AllPlayersSignedIn)" class="btn btn-success" @onclick="@StartGame">Start</button>
                }
            </header>

            <hr />
            <section>
                <fieldset class="scheduler-border-playedcards">
                    <legend>
                        @L["PlayedCards"]
                    </legend>
                    @foreach (var playedCard in _game.Rounds[_game.CurrentRound].PlayedCards)
                    {
                        <div class=@(playedCard.Winner ? "galleryWon" : (playedCard.PlayerId == _game.CurrentPlayerObj.Id ? "galleryCurrentPlayer" : "gallery"))>
                            <div class="desc">
                                <p>
                                    @(_game.Players[GetPlayerId(playedCard.PlayerId)].FirstName)
                                    <br />
                                    🎰@(_game.Rounds[_game.CurrentRound].Bets[GetPlayerId(playedCard.PlayerId)] < 0 ? "?" : _game.Rounds[_game.CurrentRound].Bets[GetPlayerId(playedCard.PlayerId)].ToString())
                                    🏆@(_game.Rounds[_game.CurrentRound].Wins[GetPlayerId(playedCard.PlayerId)].ToString())
                                </p>

                                @if (playedCard.Card != null)
                                {

                                    <div id="PlayCard_@(playedCard.PlayerId)"><img src="/CardImages/@(playedCard.Card == null ? "green_back" : playedCard.Card.Face).png" width="80" style="padding: 0px 0px 5px 0px;" /></div>
                                    @if (_game.ChooseWinner)
                                    {
                                        <button class="btn btn-outline-info" style="visibility:@(_game.ChooseWinner ? "visible" : "hidden")" disabled="@(!_game.ChooseWinner || !IsGameController())" @onclick="@(e => Winner(e, playedCard))">@L["Won"]</button>
                                    }
                                }
                                else
                                {
                                    <img src="/CardImages/green_back.png" width="80" />
                                }
                            </div>
                        </div>
                    }
                </fieldset>

                <hr />
                <fieldset class="scheduler-border-playercards">
                    <legend>@L["Cards", _game.Players[GetPlayerId(_selectedPlayer)].FirstName] | @L["Colour"]: @(GetColourChar(_game.PlayingCard.Colour.ToString()))</legend>
                    @foreach (var card in _cards)
                    {
                        //define what can be played
                        var canPlayCard = true;
                        if ((_game.PlayerToStartObj.Id != _selectedPlayer)
                            &&
                            (_game.Rounds[_game.CurrentRound]
                            .PlayedCards.Where(pc => pc.Card != null)
                            .Count() > 0))
                        {
                            var playedColour = _game.Rounds[_game.CurrentRound].PlayedCards
                                .Where(p => p.PlayerId == _game.PlayerToStartObj.Id)
                                .FirstOrDefault().Card.Colour;
                            var cardswithPlayingColour = _cards.Where(c => c.Colour == playedColour).Count();
                            canPlayCard = cardswithPlayingColour > 0 ? (card.Colour == playedColour ? true : false) : true;
                        }
                        canPlayCard = !(!canPlayCard || _game.ChooseWinner || _game.CleanTable || !_game.Betted || (_game.CurrentPlayerObj.Id != _selectedPlayer));

                        <div class="gallery">
                            <div class="desc">
                                <div id="PlayerCard_@_cards.IndexOf(card).ToString()"><img src="/CardImages/@(card.Face).png" width="80" style="padding: 0px 0px 5px 0px;" /></div>
                                <div>
                                    <button id="PlayButton_@_cards.IndexOf(card).ToString()"
                                            disabled="@(!canPlayCard)"
                                            class="@(canPlayCard ? "btn btn-success" : "btn btn-outline-success")"
                                            @onclick="@(e => Play(e, _selectedPlayer, card, canPlayCard))">
                                        @L["Play"]
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </fieldset>
            </section>

            <div class="modal @_modalClass" role="dialog" style="display: @_modalDisplay; overflow: auto">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">ScoreBoard</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => CloseScoreBoard()">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <table class="table table-sm table-striped">
                                <thead>
                                    <tr>
                                        <td></td>
                                        @(_inputLabels = "")
                                        @foreach (var player in _game.Players)
                                        {
                                            <td><p style="color: @(IsGameController(player.Id) ? "red" : "black")">@(player.Name == null ? player.Id : player.Name.Split(" ")[0])</p></td>
                                            _inputLabels += player.FirstName;
                                            if (!_game.Players.Last().Equals(player))
                                                _inputLabels += ",";
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @for (int round = 0; round < _game.Rounds.Length; round++)
                                    {
                                        <tr>
                                            <td>
                                                @if (round < 8)
                                                {
                                                    <b>@((round+1).ToString())</b>
                                                }
                                                else
                                                {
                                                    <b>@((16 - round).ToString())</b>
                                                }
                                            </td>
                                            @for (var playerIndex = 0; playerIndex < _game.Players.Length; playerIndex++)
                                            {
                                                var player = _game.Players[playerIndex];
                                                @if (round < _game.CurrentRound || _game.GameOver)
                                                {
                                                    <td style="background-color:@(_game.Rounds[round].Winners[GetPlayerId(player.Id)] ? "lightgreen" : "lightcoral")">
                                                        @(_game.Rounds[round].Scores[GetPlayerId(player.Id)].ToString())
                                                    </td>
                                                }
                                                else
                                                {
                                                    <td>@(_game.Rounds[round].Scores[GetPlayerId(player.Id)].ToString())</td>
                                                }
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal @_modalClassTrump" role="dialog" style="display: @_modalDisplayTrump; overflow: auto">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@L["Colour"]</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => CloseTrump()">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body" style="text-align:center">
                            <img class="playingColor" src="/CardImages/@(_game.PlayingCard.Face.ToString() + ".png")" width="200" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal @_modalClassTopscores" role="dialog" style="display: @_modalDisplayTopscores; overflow: auto">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Top Scores</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => CloseTopScoreBoard()">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body" style="text-align:center">
                            <table class="table table-sm table-striped">
                                <thead>
                                    <tr>
                                        <td>#</td>
                                        <td>Name</td>
                                        <td>Game</td>
                                        <td>Date</td>
                                        <td>Score</td>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var score in _topScores)
                                    {
                                        <tr>
                                            <td>@(_topScores.IndexOf(score)+1)</td>
                                            <td align="left">@(score.Name)</td>
                                            <td align="left">@(score.Id)</td>
                                            <td align="left">@(score.GameOverDateTime.ToShortDateString())</td>
                                            <td align="right">@(score.Score)</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal @_modalClassLastCards" role="dialog" style="display: @_modalDisplayLastCards; overflow: auto">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@L["LastPlayedCards"]</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => CloseLastPlayedCards()">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body" style="text-align:center">
                            <table border="0">
                                <tr>
                                    @foreach (var player in _game.Players)
                                    {
                                        <td>
                                            @(player.FirstName)
                                        </td>
                                    }
                                </tr>
                                <tr>
                                    @foreach (var face in ShowLastPlayedCard())
                                    {
                                        <td>
                                            <img src="/CardImages/@(face.ToString() + ".png")" width="100" />
                                        </td>
                                    }
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal @_modalClassGameCards" role="dialog" style="display: @_modalDisplayGameCards; overflow: auto">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@L["LastPlayedCards"]</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => CloseGamePlayedCards()">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body" style="text-align:center">
                            <table border="0">
                                <tr>
                                    <td>Round</td>
                                    <td>Card</td>
                                    @foreach (var player in _game.Players)
                                    {

                                        <td>
                                            @(player.FirstName)
                                        </td>
                                    }
                                </tr>

                                @foreach (var gameRounds in _game.Rounds)
                                {
                                    foreach (var roundHistory in gameRounds.PlayHistory)
                                    {
                                        <tr>
                                            <td></td>
                                            <td></td>
                                            @foreach (var playerCard in roundHistory)
                                            {
                                                <td style="border:@(playerCard.Winner? "dashed" : "medium")">
                                                    <img src="/CardImages/@(playerCard.Card.Face.ToString() + ".png")" width="50" />
                                                </td>

                                            }
                                        </tr>
                                    }
                                }
                            </table>
                        </div>
                    </div>
                </div>
            </div>


        }
    </Authorized>
    <NotAuthorized>
        <a href="AzureADB2C/Account/SignIn">@L["Login"]</a>
    </NotAuthorized>
</AuthorizeView>
@code {

    [Parameter]
    public string _selectedPlayer { get; set; }
    [Parameter]
    public string _selectedGame { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private HubConnection _hubConnection;
    private bool _playerSelected;
    private Game _game;
    private List<Card> _cards = new List<Card>();
    private List<PlayerSelection> _playerSelections = new List<PlayerSelection>();
    private List<GameScore> _topScores;
    private bool _inprogress = false;

    private string _modalClass = "";
    private string _modalDisplay = "none;";

    private string _modalClassTrump = "";
    private string _modalDisplayTrump = "none;";
    private string _modalClassTopscores = "";
    private string _modalDisplayTopscores = "none;";
    private string _modalClassLastCards = "";
    private string _modalDisplayLastCards = "none;";
    private string _modalClassGameCards = "";
    private string _modalDisplayGameCards = "none;";
    private string _sideView = "show;";

    private string _inputLabels = "";
    private string[][] _inputSeries;
    private string _xAxisLabels;

    private int _cardsWidth = 482;
    private int _cardIncrease = 121;
    private GameSettings settings;

    protected override async Task OnInitializedAsync()
    {
        settings = gameSettings.Value;
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(settings.GameHubUrl, options =>
            {
                options.AccessTokenProvider = GetAccessToken;
            })
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<Game, List<GameScore>>("JoinedGame", (game, topScores) =>
        {
            _inprogress = false;
            _game = game;
            _topScores = topScores;
            _cardsWidth = 482 + (game.Players[GetPlayerId(_selectedPlayer)].Cards.Count() > 4 ? (_cardIncrease * (game.Players[GetPlayerId(_selectedPlayer)].Cards.Count() - 4)) : 0);
            if (game != null)
            {
                if (!string.IsNullOrEmpty(_selectedPlayer))
                {
                    _cards = _game.Players[GetPlayerId(_selectedPlayer)].Cards;
                }
                _inputSeries = new string[_game.Players.Length][];
                for (int p = 0; p < _game.Players.Length; p++)
                {
                    _inputSeries[p] = new string[_game.Rounds.Length + 1];
                    Array.Fill(_inputSeries[p], "0");
                }
            }
            StateHasChanged();
        });

        _hubConnection.On<Game>("GameStarted", (game) =>
        {
            _inprogress = false;
            _game = game;

            StateHasChanged();
        });

        _hubConnection.On<Game>("GameResetted", (game) =>
        {
            _game = game;
            _cards = _game.Players[GetPlayerId(_selectedPlayer)].Cards;
            StateHasChanged();
        });

        _hubConnection.On<Game>("NewGameSet", (game) =>
        {
            _game = game;
            _cards = new List<Card>();
            StateHasChanged();
        });

        _hubConnection.On<Game, string>("PlayerSelected", (game, signedInPlayerID) =>
        {
            _inprogress = false;
            _game = game;
            var index = _playerSelections.FindIndex(p => p.Id == signedInPlayerID);
            if (index > 0)
                _playerSelections.RemoveAt(index);

            if (_selectedPlayer == signedInPlayerID)
            {
                _cards = _game.Players[GetPlayerId(signedInPlayerID)].Cards;
            }

            StateHasChanged();
        });

        _hubConnection.On<List<Card>, Game>("Shuffled", (cards, game) =>
        {
            _inprogress = false;
            _game = game;
            _cards = cards;
            _game.Playing = true;
            _cardsWidth = 482 + (cards.Count() > 4 ? (_cardIncrease * (cards.Count() - 4)) : 0);
            StateHasChanged();
        });

        _hubConnection.On<List<Card>, Game>("PlayedCard", (cards, game) =>
        {
            _inprogress = false;
            _game = game;
            _cards = cards;
            _cardsWidth = 482 + (cards.Count() > 4 ? (_cardIncrease * (cards.Count() - 4)) : 0);

            StateHasChanged();
        });

        _hubConnection.On<string[]>("ReturnAvailablePlayers", (rap) =>
        {
            _inprogress = false;
            _playerSelections = new List<PlayerSelection>();
            foreach (var p in rap)
            {
                _playerSelections.Add(new PlayerSelection { Id = p, Name = p });
            }
            StateHasChanged();
        });

        _hubConnection.On<Game>("WinnerRegistered", (game) =>
        {
            _inprogress = false;
            _game = game;
            StateHasChanged();
        });

        _hubConnection.On<Game>("StartNextRound", (game) =>
        {
            _inprogress = false;
            _game = game;
            StateHasChanged();
        });

        _hubConnection.On<Game>("CleanedTable", (game) =>
        {
            _inprogress = false;
            _game = game;
            StateHasChanged();
        });

        _hubConnection.On<Game>("BetPlaced", (game) =>
        {
            _inprogress = false;
            _game = game;
            StateHasChanged();
        });

        _hubConnection.On<Game>("GameSettingsResetted", (game) =>
        {
            _inprogress = false;
            _game = game;
            StateHasChanged();
        });

        var authState = await authenticationStateTask;
        if (authState.User.Identity.IsAuthenticated)
        {
            await _hubConnection.StartAsync();
            await JoinGame();
        }
    }

    public void OpenTrump()
    {
        _modalDisplayTrump = "block;";
        _modalClassTrump = "Show";
        StateHasChanged();
    }

    public void CloseTrump()
    {
        _modalDisplayTrump = "none";
        _modalClassTrump = "";
        StateHasChanged();
    }

    public void ToggleSideView()
    {
        if (_sideView == "show")
            _sideView = "none";
        else
            _sideView = "show";
        StateHasChanged();
    }

    public void OpenScoreBoard()
    {
        _modalDisplay = "block;";
        _modalClass = "Show";
        StateHasChanged();
    }

    public void CloseScoreBoard()
    {
        _modalDisplay = "none";
        _modalClass = "";
        StateHasChanged();
    }

    public void OpenTopScoreBoard()
    {
        _modalDisplayTopscores = "block;";
        _modalClassTopscores = "Show";
        StateHasChanged();
    }


    public void CloseTopScoreBoard()
    {
        _modalDisplayTopscores = "none";
        _modalClassTopscores = "";
        StateHasChanged();
    }


    public void OpenLastPlayedCards()
    {
        _modalDisplayLastCards = "block;";
        _modalClassLastCards = "Show";
        StateHasChanged();
    }

    public void OpenGamePlayedCards()
    {
        _modalDisplayGameCards = "block;";
        _modalClassGameCards = "Show";
        StateHasChanged();
    }

    public void CloseGamePlayedCards()
    {
        _modalClassGameCards = "none";
        _modalDisplayGameCards = "";
        StateHasChanged();
    }



    public void CloseLastPlayedCards()
    {
        _modalClassLastCards = "none";
        _modalDisplayLastCards = "";
        StateHasChanged();
    }


    public void CreateScoreGraphDataSets()
    {
        var xAxisLabelsArray = new string[_game.Rounds.Length + 1];
        for (int l = 0; l <= _game.Rounds.Length; l++)
        {
            xAxisLabelsArray[l] = l.ToString();
        }

        foreach (var player in _game.Players)
        {
            for (int r = 0; r <= _game.CurrentRound + 1; r++)
            {
                if (r > 0)
                    _inputSeries[GetPlayerId(player.Id)][r] = _game.Rounds[r - 1].Scores[GetPlayerId(player.Id)].ToString();
            }
        }

        //create inputs for graph
        _xAxisLabels = string.Join(",", xAxisLabelsArray);
    }

    private string[] ShowLastPlayedCard()
    {
        if (_game.Rounds[_game.CurrentRound].PlayHistory.Count() > 0)
        {
            var lastPlayedCards = _game.Rounds[_game.CurrentRound].PlayHistory.Last();
            var faces = lastPlayedCards.Select(f => f.Card.Face).ToArray();
            return faces;
        }
        else
        {
            return new string[0];
        }
    }


    private async Task<string> GetAccessToken()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        var token = "";
        if (user.Identity.IsAuthenticated)
        {
            try
            {
                var initialScopes = configuration.GetValue<string>("DownstreamApi:Scopes")?.Split(' ');
                var userflow = configuration.GetValue<string>("AzureAdB2C:SignUpSignInPolicyId");
                token = await tokenHandler.GetAccessTokenForUserAsync(initialScopes);
            }
            catch (Exception)
            {
                //ConsentHandler.HandleException(ex);
                NavigationManager.NavigateTo("MicrosoftIdentity/Account/SignOut");
            }
        }
        return token;
    }


    private async Task PlaceBet(MouseEventArgs e, string bet)
    {
        if (!_inprogress)
        {
            await _hubConnection.SendAsync("PlaceBet", _selectedGame, _selectedPlayer, bet);
            _inprogress = true;
        }
    }

    private async Task JoinGame()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (!string.IsNullOrEmpty(_selectedGame))
            if (!_inprogress)
            {
                await _hubConnection.SendAsync("JoinGame", _selectedGame, _selectedPlayer, user.Identity.Name);
                _inprogress = true;
            }
    }


    private async Task CleanTable()
    {
        if (!_inprogress)
        {
            await _hubConnection.SendAsync("CleanTable", _game.Id);
            _inprogress = true;
        }
    }

    private async Task StartGame()
    {
        if (!String.IsNullOrEmpty(_selectedPlayer))
        {
            if (!_inprogress)
            {
                await _hubConnection.SendAsync("StartGame", _game.Id);
                _inprogress = true;
            }
        }
    }

    private void NextRound()
    {
        if (!_inprogress)
        {
            _hubConnection.SendAsync("NextRound", _game.Id);
            _inprogress = true;
        }
    }

    private void Shuffle()
    {
        if (!_inprogress)
        {
            _hubConnection.SendAsync("Shuffle", _game.Id);
            _inprogress = true;
        }
    }

    private void Play(MouseEventArgs e, string player, Card card, bool canPlayCard)
    {
        if (canPlayCard && !_game.ChooseWinner && !_game.CleanTable && _game.Betted && (_game.CurrentPlayerObj.Id == _selectedPlayer))
            if (!_inprogress)
            {
                _hubConnection.SendAsync("PlayCard", _game.Id, _selectedPlayer, card);
                _inprogress = true;
            }
    }

    private void Winner(MouseEventArgs e, PlayedCard winningCard)
    {
        if (!_inprogress)
        {
            _hubConnection.SendAsync("RoundWinner", _game.Id, winningCard.PlayerId);
            _inprogress = true;
        }

    }

    private async Task SelectPlayer()
    {
        if (!_inprogress)
        {
            _playerSelected = true;
            await _hubConnection.SendAsync("JoinGame", _game.Id, _selectedPlayer);
            _inprogress = true;
        }
    }

    private async Task GetAvailablePlayers()
    {
        if (!_inprogress)
        {
            await _hubConnection.SendAsync("GetAvailablePlayers", _game.Id);
            _inprogress = true;
        }
    }

    private int GetPlayerId(string player)
    {
        var pId = 0;
        pId = Convert.ToInt32(player.Substring(1, 1)) - 1;

        return pId;
    }

    private async Task<string> GetUserEmail()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = ((System.Security.Claims.ClaimsIdentity)user.Identity).Claims.FirstOrDefault(c => c.Type == "emails");
            if (email != null)
                return email.Value;
            else
                return null;
        }
        else
        {
            return null;
        }
    }

    private bool IsGameController()
    {
        return IsGameController(_selectedPlayer);
    }

    private bool IsGameController(string player)
    {
        return _game.Players[GetPlayerId(player)].IsGameController;
    }

    private string GetColourChar(string colour)
    {
        switch (colour)
        {
            case "S":
                return "♠️";
            case "H":
                return "♥️";
            case "D":
                return "♦";
            case "C":
                return "♣️";
            default:
                return "";
        }
        return "";
    }

    public class PlayerSelection
    {
        public string Id;
        public string Name;
    }
}

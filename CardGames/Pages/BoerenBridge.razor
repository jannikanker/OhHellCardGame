@page "/boerenbridge/{_selectedGame}/{_selectedPlayer}"
@inherits BoerenBridgeBase

<link href="css/desktop.css" rel="stylesheet" />
<style>
    fieldset.scheduler-border-playercards {
        border: 0px groove #ddd !important;
        background-color: #022800;
        padding: 0 0 0 0 !important;
        margin: 0 auto;
        -webkit-box-shadow: 0px 10px 0px 10px #000;
        box-shadow: 0px 0px 0px 0px #000;
        border-radius: 5px;
        width: @(_cardsWidth.ToString())px;
    }
</style>


<AuthorizeView>
    <Authorized>
        @if (_game == null)
        {
            <p>@L["GameStartingUp", @_selectedGame]</p>
        }
        else
        {
            @if (_selectedPlayer.ToLower() == "view")
            {
                <header>
                    <p>@L["NotAuthorized"]</p>
                    <button class="btn btn-success" @onclick="() => OpenScoreBoard()">Score</button>
                </header>
                <hr />
                <section>
                    <CardGames.Components.PlayedCards game="@_game" selectedPlayer="@_selectedPlayer" OnWinner="@Winner" />
                </section>
                <CardGames.Components.ScoreBoard game="@_game" selectedPlayer="@_selectedPlayer" modalClass="@_modalClass" modalDisplay="@_modalDisplay" OnCloseCallback="@CloseScoreBoard" />

            }
            else
            {
                <header>
                    <div style="position: absolute; top: 148px; right: 16px;">
                        <div style="display:@_sideView">
                            <img class="playingColor" src="/CardImages/@(_game.PlayingCard.Face.ToString() + ".png")" width="80" />
                        </div>
                    </div>
                    <h3>@L["Welcome", @context.User.Identity.Name.Split(" ")[0]] @(IsGameController(_selectedPlayer) ? "✏️" : "")</h3>
                    <h5 class="active">@_game.Status</h5>
                    <button class="btn btn-success" @onclick="() => OpenScoreBoard()">Score</button>
                    <button class="btn btn-success" @onclick="() => OpenTopScoreBoard()">Top Scores</button>
                    <button class="btn btn-success" disabled="@(!_game.GameOver)" @onclick="() => OpenGamePlayedCards()">History</button>
                    <button class="btn btn-success" @onclick="() => OpenLastPlayedCards()">Last</button>
                    <button class="btn btn-success" @onclick="() => OpenTrump()">@(GetColourChar(_game.PlayingCard.Colour.ToString()))</button>
                    <button id="btnShuffle"
                            disabled="@((!_game.GameStarted || _game.Playing || _game.Shuffled || _game.GameOver) || (_game.PlayerToStartObj.Id != _selectedPlayer))"
                            class="btn btn-success"
                            @onclick="@(e => Shuffle())">
                        @L["Shuffle"]
                        @if (_game.CurrentRound < 8)
                        {
                            <b> ( @((_game.CurrentRound + 1).ToString()) )</b>
                        }
                        else
                        {
                            <b> ( @((16 - _game.CurrentRound).ToString()) )</b>
                        }
                    </button>

                    <button class="btn btn-success" @onclick="@ToggleSideView"><img class="playingColor" src="/CardImages/@(_game.PlayingCard.Face.ToString() + ".png")" width="10" /></button>
                    <button style="display:@(IsGameController(_selectedPlayer) ? "inline" : "none")"
                            disabled="@(!_game.CleanTable || !IsGameController(_selectedPlayer))"
                            class="btn btn-success" @onclick="@CleanTable"
                            title="@L["CleanTableText"]">
                        @L["CleanTable"]
                    </button>
                    <button style="display: @(IsGameController(_selectedPlayer) ? "inline" : "none")"
                            disabled="@(!_game.RoundReady || _game.GameOver || !IsGameController(_selectedPlayer))"
                            class="btn btn-success" @onclick="@NextRound"
                            title="@L["NextRoundText"]">
                        @L["NextRound"]
                    </button>

                    <br />
                    @if (!_game.Rounds[_game.CurrentRound].AllBetsPlaced)
                    {
                        for (int bet = 0; bet <= _game.Rounds[_game.CurrentRound].NrCards; bet++)
                        {
                            //Define if player is last and what bet is not allowed
                            var lastBetter = _game.PlayerToStart - 1;
                            if (lastBetter < 0)
                                lastBetter = _game.NrPlayers - 1;

                            var notAllowed = false;

                            if (_game.CurrentPlayer == lastBetter)
                            {
                                var sum = 0;
                                for (int b = 0; b < _game.NrPlayers; b++)
                                {
                                    if (_game.Rounds[_game.CurrentRound].Bets[b] > -1)
                                    {
                                        sum += _game.Rounds[_game.CurrentRound].Bets[b];
                                    }
                                }
                                var betNotAllowed = _game.Rounds[_game.CurrentRound].NrCards - sum;
                                if (bet == betNotAllowed)
                                {
                                    notAllowed = true;
                                }
                            }

                            var localBetVar = bet;
                            <button class=@(notAllowed && _game.CurrentPlayerObj.Id == _selectedPlayer ? "btn btn-outline-danger" : "btn btn-outline-success")
                                    disabled="@(notAllowed || !_game.Shuffled || _game.Rounds[_game.CurrentRound].Bets[GameUtils.GetPlayerId(_selectedPlayer)] > -1 || (_game.CurrentPlayerObj.Id != _selectedPlayer))"
                                    @onclick="@(e => PlaceBet(e, localBetVar.ToString()))">
                                @(notAllowed && _game.CurrentPlayerObj.Id == _selectedPlayer ? "X" : bet.ToString())
                            </button>
                        }
                    }

                    @if (string.IsNullOrEmpty(_selectedPlayer))
                    {
                        <select @bind="_selectedPlayer" disabled="@(_playerSelected)">
                            <option value="" selected>Select Player</option>
                            @foreach (var p in _playerSelections)
                            {
                                <option selected="@(p.Id == _selectedPlayer ? true : false)" value="@p.Id">@p.Name</option>
                            };
                        </select>
                        <button disabled="@(_playerSelected)" class="btn btn-success" @onclick="@GetAvailablePlayers">Refresh Players</button>
                        <button disabled="@(_playerSelected)" class="btn btn-success" @onclick="@SelectPlayer">Select Player</button>
                    }

                    @if (IsGameController(_selectedPlayer) && !_game.GameStarted)
                    {
                        <button style="visibility:@(_game.GameStarted ? "hidden" : "visible")" disabled="@(!_game.AllPlayersSignedIn)" class="btn btn-success" @onclick="@StartGame">Start</button>
                    }
                </header>

                <hr />
                <section>
                    <CardGames.Components.PlayedCards game="@_game" selectedPlayer="@_selectedPlayer" OnWinner="@Winner" />
                    <hr />
                    <CardGames.Components.PlayerCards game="@_game" selectedPlayer="@_selectedPlayer" cards="_cards" OnPlayCard="@Play"/>
                </section>

                <CardGames.Components.ScoreBoard game="@_game" selectedPlayer="@_selectedPlayer" modalClass="@_modalClass" modalDisplay="@_modalDisplay" OnCloseCallback="@CloseScoreBoard" />
                <CardGames.Components.Trump game="@_game" selectedPlayer="@_selectedPlayer" modalClass="@_modalClassTrump" modalDisplay="@_modalDisplayTrump" OnCloseCallback="@CloseTrump" />
                <CardGames.Components.TopScores topScores="@_topScores" modalClass="@_modalClassTopscores" modalDisplay="@_modalDisplayTopscores" OnCloseCallback="@CloseTopScoreBoard" />
                <CardGames.Components.LastPlayedCards game="@_game" modalClass="@_modalClassLastCards" modalDisplay="@_modalDisplayLastCards" OnCloseCallback="@CloseLastPlayedCards" />
                <CardGames.Components.CardHistory game="@_game" selectedPlayer="@_selectedPlayer" modalClass="@_modalClassGameCards" modalDisplay="@_modalDisplayGameCards" OnCloseCallback="@CloseGamePlayedCards" />
            }
        }
    </Authorized>
    <NotAuthorized>
        <a href="AzureADB2C/Account/SignIn">@L["Login"]</a>
    </NotAuthorized>
</AuthorizeView>


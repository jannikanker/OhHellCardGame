@page "/boerenbridge/{_selectedGame}/{_selectedPlayer}"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorSignalRApp.Shared;
@using BlazorSignalRApp.Shared.Models;
@using System.Collections;
@using Microsoft.Extensions.Logging;
@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Options.IOptions<GameSettings> gameSettings
@{
    var settings = gameSettings.Value;
}

<style>
    fieldset.scheduler-border {
        border: 1px groove #ddd !important;
        padding: 0 1.4em 1.4em 1.4em !important;
        margin: 0 0 1.5em 0 !important;
        -webkit-box-shadow: 0px 0px 0px 0px #000;
        box-shadow: 0px 0px 0px 0px #000;
        border-radius: 15px;
    }

    legend.scheduler-border {
        font-size: 2.2em !important;
        font-weight: bold !important;
        text-align: left !important;
        width: auto;
        padding: 0 10px;
        border-bottom: none;
    }

    div.gallerySelectedPlayer {
        margin: 5px;
        border: 1px solid #ccc;
        float: left;
        width: 120px;
        border-radius: 15px;
        background-color: lightblue;
    }

    div.gallery {
        margin: 5px;
        border: 1px solid #ffffff;
        float: left;
        width: 120px;
        border-radius: 15px;
    }

    div.galleryStarted {
        margin: 5px;
        border: 1px solid #f00;
        float: left;
        width: 120px;
        border-radius: 15px;
    }

    div.galleryWon {
        margin: 5px;
        border: 1px solid #f00;
        float: left;
        width: 120px;
        border-radius: 15px;
        background-color: red;
    }

    div.gallery:hover {
        border: 1px solid #808080;
    }

    div.desc {
        text-align: center;
    }

    img.playingColor {
        float: left;
    }

    header,
    section,
    aside,
    footer {
        margin: 0 1.5% 24px 1.5%;
    }

    section {
        float: left;
        width: 60%;
    }

    aside {
        float: left;
        width: 15%;
    }

    footer {
        clear: both;
        margin-bottom: 0;
    }
</style>

<AuthorizeView>
    <Authorized>
        @if (_game == null)
        {
            <p>The game @_selectedGame is starting up or does not yet exist. Please wait a moment.</p>
        }
        else
        {
            @if (!(_game.Players[GetPlayerId(_selectedPlayer)].Email == GetUserEmail().Result
               || GetUserEmail().Result == settings.SystemAdmin))
            {
                <p>You are not authorized to play this game.</p>
                return;
            }
            <header>
                <h3>Hello @context.User.Identity.Name you are Player @_selectedPlayer</h3>
                @if (string.IsNullOrEmpty(_selectedPlayer))
                {
                    <select @bind="_selectedPlayer" disabled="@(_playerSelected)">
                        <option value="" selected>Select Player</option>
                        @foreach (var p in _playerSelections)
                        {
                            <option selected="@(p.Id == _selectedPlayer ? true : false)" value="@p.Id">@p.Name</option>
                        };
                    </select>
                    <button disabled="@(_playerSelected)" class="btn btn-success" @onclick="@GetAvailablePlayers">Refresh Players</button>
                    <button disabled="@(_playerSelected)" class="btn btn-success" @onclick="@SelectPlayer">Select Player</button>
                }

                @if (_selectedPlayer == "P1" && !_game.GameStarted)
                {
                    <button style="visibility:@(_game.GameStarted ? "hidden" : "visible")" disabled="@(!_game.AllPlayersSignedIn || _game.GameStarted || _selectedPlayer != "P1")" class="btn btn-success" @onclick="@StartGame">Start Game</button>
                }

            </header>

            <aside>
                <h1>@_selectedGame</h1>
                @for (int r = 0; r < 8; r++)
                {
                    <button id="btnForward1"
                            disabled="@((!_game.Rounds[r].Current || _game.Playing || _game.Shuffled || _game.GameOver) || ("P"+_game.PlayerToStart != _selectedPlayer))"
                            class="@(_game.Rounds[r].Current ? "btn btn-success" : "btn btn-default")"
                            @onclick="@(e => Shuffle())">
                        @(r + 1)
                    </button>
                    <button id="btnForward1"
                            disabled="@((!_game.Rounds[r+8].Current || _game.Playing || _game.Shuffled  || _game.GameOver) || ("P"+_game.PlayerToStart != _selectedPlayer))"
                            class="@(_game.Rounds[r+8].Current ? "btn btn-success" : "btn btn-default")"
                            @onclick="@(e => Shuffle())">
                        @((8 - r))
                    </button>
                    <br />
                }
                <p></p>
                <div>
                    <h3>Betting</h3>
                    @for (int bet = 0; bet <= _game.Rounds[_game.CurrentRound].NrCards; bet++)
                    {
                        //Define if player is last and what bet is not allowed
                        var lastBetter = _game.PlayerToStart - 1;
                        if (lastBetter < 1)
                            lastBetter = 4;

                        var notAllowed = false;

                        if (_game.CurrentPlayer == lastBetter)
                        {
                            var sum = 0;
                            for (int b = 0; b < 4; b++)
                            {
                                if (_game.Rounds[_game.CurrentRound].Bets[b] > -1)
                                {
                                    sum += _game.Rounds[_game.CurrentRound].Bets[b];
                                }
                            }
                            var betNotAllowed = _game.Rounds[_game.CurrentRound].NrCards - sum;
                            if (bet == betNotAllowed)
                            {
                                notAllowed = true;
                            }

                        }

                        var localBetVar = bet;
                        <button class="btn btn-outline-success" disabled="@(notAllowed || !_game.Shuffled || _game.Rounds[_game.CurrentRound].Bets[GetPlayerId(_selectedPlayer)] > -1 || ("P" + _game.CurrentPlayer != _selectedPlayer))"
                                @onclick="@(e => PlaceBet(e, localBetVar.ToString()))">
                            @bet
                        </button>
                        @if (bet == 4)
                        {
                            <br />
                        }
                    }
                </div>
                <p></p>
                <h3>Colour</h3>
                <div id="PlayColour"><img class="playingColor" src="/CardImages/@(_game.PlayingCard.Face.ToString() + ".png")" width="100" /></div>

                <p></p>
                <button style="visibility:@((_selectedPlayer == "P1") ? "visible" : "hidden")"
                        disabled="@(!_game.CleanTable || (_selectedPlayer != "P1"))"
                        class="btn btn-success" @onclick="@CleanTable">
                    Clean Table
                </button>
                <p></p>
                <button style="visibility:@((_selectedPlayer == "P1") ? "visible" : "hidden")"
                        disabled="@(!_game.RoundReady || _game.GameOver || _selectedPlayer != "P1")"
                        class="btn btn-success" @onclick="@NextRound">
                    Next Round
                </button>
            </aside>

            <section>
                <h2 class="active">@_game.Status</h2>
                <fieldset class="scheduler-border">
                    <legend>Played Cards </legend>
                    @foreach (var playedCard in _game.Rounds[_game.CurrentRound].PlayedCards)
                    {
                        <div class=@(playedCard.Winner ? "galleryWon" : (playedCard.PlayerName == "P" + _game.PlayerToStart.ToString()? "galleryStarted": playedCard.PlayerName == _selectedPlayer ? "gallerySelectedPlayer" : "gallery"))>
                            <div class="desc">
                                <p>
                                    @(playedCard.PlayerName)
                                    <br />
                                    [Bet:@(_game.Rounds[_game.CurrentRound].Bets[GetPlayerId(playedCard.PlayerName)] < 0 ? "?" : _game.Rounds[_game.CurrentRound].Bets[GetPlayerId(playedCard.PlayerName)].ToString()),
                                    Wins:@(_game.Rounds[_game.CurrentRound].Wins[GetPlayerId(playedCard.PlayerName)].ToString())]
                                </p>

                                @if (playedCard.Card != null)
                                {

                                    <div id="PlayCard_@(playedCard.PlayerName)"><img src="/CardImages/@(playedCard.Card == null ? "green_back" : playedCard.Card.Face).png" width="100" /></div>
                                    @if (_game.ChooseWinner)
                                    {
                                        <button class="btn btn-outline-info" style="visibility:@(_game.ChooseWinner ? "visible" : "hidden")" disabled="@(!_game.ChooseWinner || (_selectedPlayer != "P1"))" @onclick="@(e => Winner(e, playedCard))">Won</button>

                                    }
                                }
                                else
                                {
                                    <img src="/CardImages/green_back.png" width="100" />
                                }
                            </div>
                        </div>

                    }
                </fieldset>

                <fieldset class="scheduler-border">
                    <legend>Cards of @_selectedPlayer</legend>

                    @foreach (var card in _cards)
                    {
                        //define what can be played
                        var canPlayCard = true;
                        if (("P" + _game.PlayerToStart != _selectedPlayer)
                            &&
                            (_game.Rounds[_game.CurrentRound]
                            .PlayedCards.Where(pc => pc.Card != null)
                            .Count() > 0))
                        {
                            var playedColour = _game.Rounds[_game.CurrentRound].PlayedCards
                                .Where(p => p.PlayerName == "P" + _game.PlayerToStart.ToString())
                                .FirstOrDefault().Card.Colour;
                            var cardswithPlayingColour = _cards.Where(c => c.Colour == playedColour).Count();
                            canPlayCard = cardswithPlayingColour > 0 ? (card.Colour == playedColour ? true : false) : true;
                        }
                        <div class="gallery">
                            <div class="desc">
                                <div id="PlayerCard_@_cards.IndexOf(card).ToString()"><img src="/CardImages/@(card.Face).png" width="100" /></div>
                                <div><button id="PlayButton_@_cards.IndexOf(card).ToString()" 
                                             disabled="@(!canPlayCard || _game.ChooseWinner || _game.CleanTable || !_game.Betted || ("P" + _game.CurrentPlayer != _selectedPlayer))" 
                                             class="btn btn-success" @onclick="@(e => Play(e, _selectedPlayer, card, canPlayCard))">
                                    Play
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </fieldset>
            </section>
            <aside>
                <table class="table table-sm table-striped">
                    <thead>
                        <tr>
                            <td></td>
                            <td>P1</td>
                            <td>P2</td>
                            <td>P3</td>
                            <td>P4</td>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int round = 0; round < _game.Rounds.Length; round++)
                        {
                            <tr>
                                <td>
                                    @if(round < 8)
                                    {
                                        <b>@((round+1).ToString())</b>
                                    }
                                    else
                                    {
                                        <b>@((16 - round).ToString())</b>
                                    }
                                </td>
                                <td>@(_game.Rounds[round].Scores[0].ToString())</td>
                                <td>@(_game.Rounds[round].Scores[1].ToString())</td>
                                <td>@(_game.Rounds[round].Scores[2].ToString())</td>
                                <td>@(_game.Rounds[round].Scores[3].ToString())</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </aside>
        }
    </Authorized>
    <NotAuthorized>
        <a href="AzureADB2C/Account/SignIn">Log in before playing.</a>
    </NotAuthorized>
</AuthorizeView>
@code {

    [Parameter]
    public string _selectedPlayer { get; set; }
    [Parameter]
    public string _selectedGame { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private HubConnection _hubConnection;
    private bool _playerSelected;
    private Game _game;
    private List<Card> _cards = new List<Card>();
    private List<PlayerSelection> _playerSelections = new List<PlayerSelection>();

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/gameHub"))
        .WithAutomaticReconnect()
            .ConfigureLogging(logging =>
            {
                logging.SetMinimumLevel(LogLevel.Information);
                logging.AddConsole();
            })
        .Build();


        _hubConnection.On<Game>("JoinedGame", (game) =>
        {
            _game = game;
            if (game != null)
            {
                if (!string.IsNullOrEmpty(_selectedPlayer))
                {
                    _cards = _game.Players[GetPlayerId(_selectedPlayer)].Cards;
                }
            }
            StateHasChanged();
        });

        _hubConnection.On<Game>("GameStarted", (game) =>
        {
            _game = game;

            StateHasChanged();
        });

        _hubConnection.On<Game>("GameResetted", (game) =>
        {
            _game = game;
            StateHasChanged();
        });


        _hubConnection.On<Game, string>("PlayerSelected", (game, signedInPlayerID) =>
        {
            _game = game;
            var index = _playerSelections.FindIndex(p => p.Id == signedInPlayerID);
            if (index > 0)
                _playerSelections.RemoveAt(index);

            if (_selectedPlayer == signedInPlayerID)
            {
                _cards = _game.Players[GetPlayerId(signedInPlayerID)].Cards;
            }

            StateHasChanged();
        });

        _hubConnection.On<List<Card>, Game>("Shuffled", (cards, game) =>
        {
            _game = game;
            _cards = cards;
            _game.Playing = true;
            StateHasChanged();
        });

        _hubConnection.On<List<Card>, Game>("PlayedCard", (cards, game) =>
        {
            _game = game;
            _cards = cards;
            StateHasChanged();
        });

        _hubConnection.On<string[]>("ReturnAvailablePlayers", (rap) =>
        {
            _playerSelections = new List<PlayerSelection>();
            foreach (var p in rap)
            {
                _playerSelections.Add(new PlayerSelection { Id = p, Name = p });
            }
            StateHasChanged();
        });

        _hubConnection.On<Game>("WinnerRegistered", (game) =>
        {
            _game = game;
            StateHasChanged();
        });

        _hubConnection.On<Game>("StartNextRound", (game) =>
        {
            _game = game;
            StateHasChanged();
        });

        _hubConnection.On<Game>("CleanedTable", (game) =>
        {
            _game = game;
            StateHasChanged();
        });

        _hubConnection.On<Game>("BetPlaced", (game) =>
        {
            _game = game;
            StateHasChanged();
        });

        await _hubConnection.StartAsync();

        await JoinGame();
    }

    private async Task PlaceBet(MouseEventArgs e, string bet)
    {
        await _hubConnection.SendAsync("PlaceBet", _selectedGame, _selectedPlayer, bet);
    }

    private async Task JoinGame()
    {
        if (!string.IsNullOrEmpty(_selectedGame))
            await _hubConnection.SendAsync("JoinGame", _selectedGame, _selectedPlayer);
    }


    private async Task CleanTable()
    {
        await _hubConnection.SendAsync("CleanTable", _game.Id);
    }

    private async Task StartGame()
    {
        if (!String.IsNullOrEmpty(_selectedPlayer))
        {
            await _hubConnection.SendAsync("StartGame", _game.Id);
        }
    }

    private void NextRound()
    {
        _hubConnection.SendAsync("NextRound", _game.Id);
    }

    private Task Shuffle() =>
        _hubConnection.SendAsync("Shuffle", _game.Id);

    private void Play(MouseEventArgs e, string player, Card card, bool canPlayCard)
    {
        if(canPlayCard && !_game.ChooseWinner && !_game.CleanTable && _game.Betted && ("P" + _game.CurrentPlayer == _selectedPlayer))
            _hubConnection.SendAsync("PlayCard", _game.Id, _selectedPlayer, card);
    }

    private void Winner(MouseEventArgs e, PlayedCard winningCard)
    {
        _hubConnection.SendAsync("RoundWinner", _game.Id, winningCard);

    }

    private async Task SelectPlayer()
    {
        _playerSelected = true;
        await _hubConnection.SendAsync("JoinGame", _game.Id, _selectedPlayer);
    }

    private async Task GetAvailablePlayers()
    {
        await _hubConnection.SendAsync("GetAvailablePlayers", _game.Id);
    }

    private int GetPlayerId(string player)
    {
        var pId = 0;
        switch (player)
        {
            case "P1":
                pId = 0;
                break;
            case "P2":
                pId = 1;
                break;
            case "P3":
                pId = 2;
                break;
            case "P4":
                pId = 3;
                break;
        }
        return pId;
    }

    private async Task<string> GetUserEmail()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = ((System.Security.Claims.ClaimsIdentity)user.Identity).Claims.FirstOrDefault(c => c.Type == "emails");
            if (email != null)
                return email.Value;
            else
                return null;
        }
        else
        {
            return null;
        }
    }

    public class PlayerSelection
    {
        public string Id;
        public string Name;
    }
}

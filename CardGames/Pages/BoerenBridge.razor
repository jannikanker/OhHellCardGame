@page "/boerenbridge/{_selectedGame}/{_selectedPlayer}"
@inherits BoerenBridgeBase

<link href="css/desktop.css" rel="stylesheet" />
<style>
    fieldset.scheduler-border-playercards {
        border: 0px groove #ddd !important;
        background-color: #022800;
        padding: 0 0 0 0 !important;
        margin: 0 auto;
        -webkit-box-shadow: 0px 10px 0px 10px #000;
        box-shadow: 0px 0px 0px 0px #000;
        border-radius: 5px;
        width: @(_cardsWidth.ToString())px;
    }
</style>


<AuthorizeView>
    <Authorized>
        @if (_game == null)
        {
            <p>@L["GameStartingUp", @_selectedGame]</p>
        }
        else
        {
            @if (_selectedPlayer.ToLower() == "view")
            {
                <header>
                    <CardGames.Components.TrumpCardSideView game="@_game" sideView="@_sideView" />
                    <p>@L["NotAuthorized"]</p>
                    <button class="btn btn-success" @onclick="() => OpenScoreBoard()">Score</button>
                </header>
                <hr />
                <section>
                    <CardGames.Components.PlayedCards game="@_game" selectedPlayer="@_selectedPlayer" OnWinner="@Winner" />
                </section>
                <CardGames.Components.ScoreBoard game="@_game" selectedPlayer="@_selectedPlayer" modalClass="@_modalClass" modalDisplay="@_modalDisplay" OnCloseCallback="@CloseScoreBoard" />

            }
            else
            {
                <header>
                    <CardGames.Components.TrumpCardSideView game="@_game" sideView="@_sideView" />
                    <h5 class="active">@_game.Status</h5>

                    <button class="btn btn-success" @onclick="() => OpenScoreBoard()">Score</button>
                    <button class="btn btn-success" @onclick="() => OpenTopScoreBoard()">Top Scores</button>
                    <button class="btn btn-success" disabled="@(!_game.GameOver)" @onclick="() => OpenGamePlayedCards()">History</button>
                    <button class="btn btn-success" @onclick="() => OpenLastPlayedCards()">Last</button>
                    <button class="btn btn-success" @onclick="() => OpenTrump()">@(GetColourChar(_game.PlayingCard.Colour.ToString()))</button>
                    <button id="btnShuffle"
                            disabled="@((!_game.GameStarted || _game.Playing || _game.Shuffled || _game.GameOver) || (_game.PlayerToStartObj.Id != _selectedPlayer))"
                            class="btn btn-success"
                            @onclick="@(e => Shuffle())">
                        @L["Shuffle"]
                        @if (_game.CurrentRound < 8)
                        {
                            <b> ( @((_game.CurrentRound + 1).ToString()) )</b>
                        }
                        else
                        {
                            <b> ( @((16 - _game.CurrentRound).ToString()) )</b>
                        }
                    </button>

                    <button class="btn btn-success" @onclick="@ToggleSideView"><img class="playingColor" src="/CardImages/@(_game.PlayingCard.Face.ToString() + ".png")" width="10" /></button>
                    <button style="display:@(IsGameController(_selectedPlayer) ? "inline" : "none")"
                            disabled="@(!_game.CleanTable || !IsGameController(_selectedPlayer))"
                            class="btn btn-success" @onclick="@CleanTable"
                            title="@L["CleanTableText"]">
                        @L["CleanTable"]
                    </button>
                    <button style="display: @(IsGameController(_selectedPlayer) ? "inline" : "none")"
                            disabled="@(!_game.RoundReady || _game.GameOver || !IsGameController(_selectedPlayer))"
                            class="btn btn-success" @onclick="@NextRound"
                            title="@L["NextRoundText"]">
                        @L["NextRound"]
                    </button>

                    <br />
                
                    <CardGames.Components.SetBets game="@_game" selectedPlayer="@_selectedPlayer" OnPlaceBet="PlaceBet" />

                    @if (IsGameController(_selectedPlayer) && !_game.GameStarted)
                    {
                        <button style="visibility:@(_game.GameStarted ? "hidden" : "visible")" disabled="@(!_game.AllPlayersSignedIn)" class="btn btn-success" @onclick="@StartGame">Start</button>
                    }
                </header>

                <hr />
                <section>
                    <CardGames.Components.PlayedCards game="@_game" selectedPlayer="@_selectedPlayer" OnWinner="@Winner" />
                    <hr />
                    <CardGames.Components.PlayerCards game="@_game" selectedPlayer="@_selectedPlayer" cards="_cards" OnPlayCard="@Play"/>
                </section>

                <CardGames.Components.ScoreBoard game="@_game" selectedPlayer="@_selectedPlayer" modalClass="@_modalClass" modalDisplay="@_modalDisplay" OnCloseCallback="@CloseScoreBoard" />
                <CardGames.Components.Trump game="@_game" selectedPlayer="@_selectedPlayer" modalClass="@_modalClassTrump" modalDisplay="@_modalDisplayTrump" OnCloseCallback="@CloseTrump" />
                <CardGames.Components.TopScores topScores="@_topScores" modalClass="@_modalClassTopscores" modalDisplay="@_modalDisplayTopscores" OnCloseCallback="@CloseTopScoreBoard" />
                <CardGames.Components.LastPlayedCards game="@_game" modalClass="@_modalClassLastCards" modalDisplay="@_modalDisplayLastCards" OnCloseCallback="@CloseLastPlayedCards" />
                <CardGames.Components.CardHistory game="@_game" selectedPlayer="@_selectedPlayer" modalClass="@_modalClassGameCards" modalDisplay="@_modalDisplayGameCards" OnCloseCallback="@CloseGamePlayedCards" />
            }
        }
    </Authorized>
    <NotAuthorized>
        <a href="MicrosoftIdentity/Account/SignIn">@L["Login"]</a>
    </NotAuthorized>
</AuthorizeView>


@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using CardGames.Shared;
@using CardGames.Shared.Models;
@using System.Collections;
@using Microsoft.Extensions.Logging;
@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Options.IOptions<GameSettings> gameSettings
@{
    var settings = gameSettings.Value;
}


<h1>Boeren Bridge Settings</h1>
<img src="/CardImages/back_cards-07.png" width="300" />
<AuthorizeView>
    <Authorized>
        <h1>Hello @context.User.Identity.Name</h1>
        @if (GetUserEmail().Result == settings.SystemAdmin || IsGameAdmin())
        {
            if (GetUserEmail().Result == settings.SystemAdmin)
            {
                <input type="text" @bind="_newGameName" />
                <input type="Text" @bind="_newGameAdmin" />
                <button class="btn btn-danger" @onclick="@NewGame">New Game</button>
                <br />

                <p>Games</p><button class="btn btn-danger" @onclick="@GetRunningGames"><span class="fa fa-refresh"></span></button>
                <select @bind="_selectedGame">
                    <option value="">-select game-</option>
                    @foreach (var game in _runningGames.GroupBy(g => g.GameId))
                    {
                        <option value=@game.Key>@game.Key</option>
                    }
                </select>
                <p></p>
                <button class="btn btn-danger" @onclick="@RemoveGame">Remove Game</button>
                <button class="btn btn-danger" @onclick="@ResetGame">Reset Game</button>

                <p></p>
                @foreach (var game in _runningGames)
                {
                    <p>
                        @game.GameId:@game.Player
                        <input @bind="game.Email" type="text" size="100" />
                        Admin <input type="checkbox" @bind="game.IsGameAdmin">
                        <button class="btn btn-success" @onclick="@(e => SavePlayer(e, game))">Save</button>
                        <button class="btn btn-outline-success" @onclick="@(e => NavigateToGame(e, game))">GoTo @game.GameId as @game.Player</button>
                    </p>
                }
            }
            else
            {
                @foreach (var game in _runningGames)
                {
                    <p>
                        @game.GameId:@game.Player
                        <input @bind="game.Email" type="text" size="100" />
                        Admin <input disabled type="checkbox" @bind="game.IsGameAdmin">
                        <button class="btn btn-success" @onclick="@(e => SavePlayer(e, game))">Save</button>
                        <button class="btn btn-outline-success" @onclick="@(e => NavigateToGame(e, game))">GoTo @game.GameId as @game.Player</button>
                    </p>
                }
            }
        }
        else
        {
            <p>Able to play in the following games as player</p>
            @foreach (var game in _runningGames)
            {
                <p>
                    <button class="btn btn-outline-success" @onclick="@(e => NavigateToGame(e, game))">Click to go to @game.GameId</button>
                </p>
            }
        }
    </Authorized>
    <NotAuthorized>
        <a href="AzureADB2C/Account/SignIn">Log in before playing.</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private HubConnection _hubConnection;
    private List<GamePlayer> _runningGames = new List<GamePlayer>();
    private string _newGameName = "game1";
    private string _newGameAdmin = "";
    private string _selectedGame;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/gameHub"))
        .WithAutomaticReconnect()
            .ConfigureLogging(logging =>
            {
                logging.SetMinimumLevel(LogLevel.Information);
                logging.AddConsole();
            })
        .Build();

        _hubConnection.On<List<GamePlayer>>("ReturnRunningGames", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        _hubConnection.On<List<GamePlayer>>("NewGameCreated", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        _hubConnection.On<List<GamePlayer>>("GameResetted", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        _hubConnection.On<List<GamePlayer>>("GameRemoved", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        _hubConnection.On<List<GamePlayer>>("SavedGamePlayer", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            await GetRunningGames();
        }
    }


    private async Task<string> GetUserEmail()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = ((System.Security.Claims.ClaimsIdentity)user.Identity).Claims.FirstOrDefault(c => c.Type == "emails");
            if (email != null)
                return email.Value;
            else
                return null;
        }
        else
        {
            return null;
        }
    }


    private async Task NewGame()
    {
        await _hubConnection.SendAsync("NewGame", _newGameName, _newGameAdmin, GetUserEmail().Result);
    }

    private async Task ResetGame()
    {
        await _hubConnection.SendAsync("ResetGame", _selectedGame, GetUserEmail().Result);
    }

    private async Task RemoveGame()
    {
        await _hubConnection.SendAsync("RemoveGame", _selectedGame, GetUserEmail().Result);
    }

    private async Task GetRunningGames()
    {
        var userEmail = await GetUserEmail();

        await _hubConnection.SendAsync("GetRunningGames", userEmail);
    }

    private void SavePlayer(MouseEventArgs e, GamePlayer gamePlayer)
    {
        _hubConnection.SendAsync("SaveGamePlayer", gamePlayer, GetUserEmail().Result);

    }

    private void NavigateToGame(MouseEventArgs e, GamePlayer gamePlayer)
    {
        NavigationManager.NavigateTo(String.Format("/BoerenBridge/{0}/{1}", gamePlayer.GameId, gamePlayer.Player));
    }

    private bool IsGameAdmin()
    {
        var playerEmail = GetUserEmail().Result;
        var isAdmin = _runningGames.Where(p => p.Email == playerEmail && p.IsGameAdmin).Count() > 0;
        return isAdmin;
    }
}

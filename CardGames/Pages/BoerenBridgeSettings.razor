@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Http
@using CardGames.Shared.Models;
@using Microsoft.Identity.Web
@using Microsoft.Extensions.Configuration

@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager
@inject ITokenAcquisition tokenHandler
@inject IConfiguration configuration;
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject Microsoft.Extensions.Options.IOptions<GameSettings> gameSettings

@{
    var settings = gameSettings.Value;
}


<h1>Boeren Bridge Settings</h1>
<img src="/CardImages/back_cards-07.png" width="300" />
<AuthorizeView>
    <Authorized>
        <h1>Hello @context.User.Identity.Name</h1>
        @if (GetUserEmail().Result == settings.SystemAdmin || IsGameAdmin())
        {
            if (GetUserEmail().Result == settings.SystemAdmin)
            {
                <input type="text" @bind="_newGameName" />
                <input type="Text" @bind="_newGameAdmin" />
                <input type="number" @bind="_nrPlayers" min="2" max="6" />
                <button class="btn btn-danger" @onclick="@NewGame">New Game</button>
                <br />

                <p>Games</p><button class="btn btn-danger" @onclick="@GetRunningGames"><span class="fa fa-refresh"></span></button>
                <select @bind="_selectedGame">
                    <option value="">-select game-</option>
                    @foreach (var game in _runningGames.GroupBy(g => g.GameId))
                    {
                        <option value=@game.Key>@game.Key</option>
                    }
                </select>
                <p></p>
                <button class="btn btn-danger" @onclick="@RemoveGame">Remove Game</button>
                <button class="btn btn-danger" @onclick="@ResetGame">Reset Game</button>
                <button class="btn btn-danger" @onclick="@ResetCurrentRound">Reset Round</button>
                <button class="btn btn-danger" @onclick="@NewGameSet">New Set</button>
                <button class="btn btn-danger" @onclick="@GetGameSettings">Get Game Settings</button>
                <button class="btn btn-danger" @onclick="@SaveGameSettings">Save Game Settings</button>
                <button class="btn btn-danger" @onclick="@GameSavedToDB">Save Game to DB</button>

                <div class="form-group">
                    <label for="comment">Comment:</label>
                    <textarea class="form-control" rows="5" id="gameSettings" @bind="_gameSettings"></textarea>
                </div>

                <p></p>
                @foreach (var game in _runningGames)
                {
                    <p>
                        @game.GameId:@game.Player
                        <input @bind="game.Email" type="text" size="100" />
                        Admin <input type="checkbox" @bind="game.IsGameAdmin">
                        <button class="btn btn-success" @onclick="@(e => SavePlayer(e, game))">Save</button>
                        <button class="btn btn-outline-success" @onclick="@(e => NavigateToGame(e, game))">GoTo @game.GameId as @game.Player</button>
                    </p>
                }

            }
            else
            {
                @foreach (var game in _runningGames)
                {
                    <p>
                        @game.GameId:@game.Player
                        <input @bind="game.Email" type="text" size="100" />
                        Admin <input disabled type="checkbox" @bind="game.IsGameAdmin">
                        <button class="btn btn-success" @onclick="@(e => SavePlayer(e, game))">Save</button>
                        <button class="btn btn-outline-success" @onclick="@(e => NavigateToGame(e, game))">GoTo @game.GameId as @game.Player</button>
                    </p>
                }
            }
        }
        else
        {
            <p>Able to play in the following games as player</p>
            @foreach (var game in _runningGames)
            {
                <p>
                    <button class="btn btn-outline-success" @onclick="@(e => NavigateToGame(e, game))">Click to go to @game.GameId</button>
                </p>
            }
        }
    </Authorized>
    <NotAuthorized>
        <a href="MicrosoftIdentity/Account/SignIn">Log in before playing.</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private HubConnection _hubConnection;
    private List<GamePlayer> _runningGames = new List<GamePlayer>();
    private string _newGameName = "game1";
    private string _newGameAdmin = "";
    private string _selectedGame;
    private int _nrPlayers = 4;
    private string _gameSettings;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gameHub"), options =>
            {
                options.AccessTokenProvider = GetAccessToken;
            })
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<List<GamePlayer>>("ReturnRunningGames", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        _hubConnection.On<List<GamePlayer>>("NewGameCreated", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        _hubConnection.On<List<GamePlayer>>("CurrentRoundResetted", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        _hubConnection.On<List<GamePlayer>>("GameResetted", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        _hubConnection.On<string>("GameSettings", (gameSettings) =>
        {
            _gameSettings = gameSettings;
            StateHasChanged();
        });

        _hubConnection.On<List<GamePlayer>>("GameRemoved", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        _hubConnection.On<List<GamePlayer>>("SavedGamePlayer", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            try
            {
                var a = await GetAccessToken();
                await _hubConnection.StartAsync();
                await GetRunningGames();
            }
            catch (Exception ex)
            {
                var msg = ex.Message;
                throw;
            }
        }
    }


    private async Task<string> GetAccessToken()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        var token = "";
        if (user.Identity.IsAuthenticated)
        {
            try
            {
                var initialScopes = configuration.GetValue<string>("DownstreamApi:Scopes")?.Split(' ');
                var userflow = configuration.GetValue<string>("AzureAdB2C:SignUpSignInPolicyId");
                token = await tokenHandler.GetAccessTokenForUserAsync(initialScopes);
            }
            catch (Exception)
            {
                //ConsentHandler.HandleException(ex);
                NavigationManager.NavigateTo("MicrosoftIdentity/Account/SignOut");
            }
        }
        return token;
    }

    private async Task<string> GetUserEmail()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = ((System.Security.Claims.ClaimsIdentity)user.Identity).Claims.FirstOrDefault(c => c.Type == "emails");
            if (email != null)
                return email.Value;
            else
                return null;
        }
        else
        {
            return null;
        }
    }


    private async Task NewGame()
    {
        await _hubConnection.SendAsync("NewGame", _newGameName, _newGameAdmin, GetUserEmail().Result, _nrPlayers);
    }

    private async Task ResetGame()
    {
        await _hubConnection.SendAsync("ResetGame", _selectedGame, GetUserEmail().Result);
    }

    private async Task ResetCurrentRound()
    {
        await _hubConnection.SendAsync("ResetCurrentRound", _selectedGame, GetUserEmail().Result);
    }

    private async Task RemoveGame()
    {
        await _hubConnection.SendAsync("RemoveGame", _selectedGame, GetUserEmail().Result);
    }

    private async Task GetGameSettings()
    {
        await _hubConnection.SendAsync("GetGameSettings", _selectedGame, GetUserEmail().Result);
    }

    private async Task SaveGameSettings()
    {
        var settings = _gameSettings;
        await _hubConnection.SendAsync("SaveGameSettings", _selectedGame, GetUserEmail().Result, settings);
    }

    private async Task GameSavedToDB()
    {
        var settings = _gameSettings;
        await _hubConnection.SendAsync("SaveGameToDb", _selectedGame, GetUserEmail().Result);
    }

    private async Task NewGameSet()
    {
        await _hubConnection.SendAsync("NewGameSet", _selectedGame, GetUserEmail().Result);
    }

    private async Task GetRunningGames()
    {
        var userEmail = await GetUserEmail();

        await _hubConnection.SendAsync("GetRunningGames", userEmail);
    }

    private void SavePlayer(MouseEventArgs e, GamePlayer gamePlayer)
    {
        _hubConnection.SendAsync("SaveGamePlayer", gamePlayer, GetUserEmail().Result);

    }

    private void NavigateToGame(MouseEventArgs e, GamePlayer gamePlayer)
    {
        NavigationManager.NavigateTo(String.Format("/BoerenBridge/{0}/{1}", gamePlayer.GameId, gamePlayer.Player));
    }

    private bool IsGameAdmin()
    {
        var playerEmail = GetUserEmail().Result;
        var isAdmin = _runningGames.Where(p => p.Email == playerEmail && p.IsGameAdmin).Count() > 0;
        return isAdmin;
    }

}

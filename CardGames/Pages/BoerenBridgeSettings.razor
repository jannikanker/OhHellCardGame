@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Http
@using CardGames.Shared.Models;
@using Microsoft.Identity.Web
@using Microsoft.Extensions.Configuration

@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager NavigationManager
@inject ITokenAcquisition tokenHandler
@inject IConfiguration configuration;
@inject MicrosoftIdentityConsentAndConditionalAccessHandler ConsentHandler
@inject Microsoft.Extensions.Options.IOptions<GameSettings> gameSettings


<h1>Boeren Bridge Settings</h1>
<img src="/CardImages/back_cards-07.png" width="300" />
<AuthorizeView>
    <Authorized>
        @if (_gameUser.HasRole(UserRoles.AdminOrController))
        {
            <input type="text" @bind="_newGameName" style="display:@ShowFor(UserRoles.Admin)" />
            <input type="Text" @bind="_newGameAdmin" style="display:@ShowFor(UserRoles.Admin)" />
            <input type="number" @bind="_nrPlayers" min="2" max="6" style="display:@ShowFor(UserRoles.Admin)" />
            <button class="btn btn-danger" @onclick="@NewGameRegistry" style="display:@ShowFor(UserRoles.Admin)">New Registry</button>
            <br />
            
            <p>Games</p><button class="btn btn-danger" @onclick="@GetRunningGames"><span class="fa fa-refresh"></span></button>
            <select @bind="_selectedGame" style="display:@ShowFor(UserRoles.AdminOrController)">
                <option value="">-select game-</option>
                @{
                    foreach (var gameRegistry in _gameRegistries)
                    {
                        <option value=@gameRegistry.id>@gameRegistry.Name</option>
                    }
                }
            </select>
            <p></p>
            <button class="btn btn-danger" @onclick="@ShufflePlayers" style="display:@ShowFor(UserRoles.Admin)">Shuffle Players</button>
            <button class="btn btn-danger" @onclick="@RemoveGameRegistry" style="display:@ShowFor(UserRoles.Admin)">Remove Game Registry</button>
            <button class="btn btn-danger" @onclick="@NewGame" style="display:@ShowFor(UserRoles.Admin)">New Game</button>
            <button class="btn btn-danger" @onclick="@RemoveGame" style="display:@ShowFor(UserRoles.Admin)">Remove Game</button>
            <button class="btn btn-danger" disabled @onclick="@ResetGame" style="display:@ShowFor(UserRoles.AdminOrController)">Reset Game</button>
            <button class="btn btn-danger" @onclick="@ResetCurrentRound" style="display:@ShowFor(UserRoles.AdminOrController)">Reset Round</button>
            <button class="btn btn-danger" @onclick="@GetGameSettings" style="display:@ShowFor(UserRoles.Admin)">Get Game Settings</button>
            <button class="btn btn-danger" disabled @onclick="@SaveGameSettings" style="display:@ShowFor(UserRoles.Admin)">Save Game Settings</button>
            <button class="btn btn-danger" disabled @onclick="@GameSavedToDB" style="display:@ShowFor(UserRoles.Admin)">Save Game to DB</button>
            <button class="btn btn-danger" @onclick="@ShowAccessToken" style="display:@ShowFor(UserRoles.Admin)">Get AccessToken</button>

            <div class="form-group" style="display:@ShowFor(UserRoles.Admin)">
                <p>Info</p>
                <textarea class="form-control" rows="5" id="gameSettings" @bind="_gameInfo"></textarea>
            </div>

            <p></p>
            @foreach (var registry in _gameRegistries)
            {
                @registry.Name<br />
                @foreach (var row in registry.Players)
                {
                    <p>
                        @row.Player
                        <input @bind="row.Email" type="text" size="100" disabled="@(registry.GameState > GameStates.NoGame)"/>
                        Admin <input type="checkbox" @bind="row.IsGameAdmin" disabled="@(registry.GameState > GameStates.NoGame)">
                        <button class="btn btn-success" @onclick="@(e => SavePlayer(e, row))" disabled="@(registry.GameState > GameStates.NoGame)">Save</button>
                    @if (registry.GameState > GameStates.NoGame)
                    {
                        <button class="btn btn-outline-success" @onclick="@(e => NavigateToGame(e, row))">Go To @row.GameId as @row.Player</button>
                    }
                    </p>
                 }
                <hr/>
             }
        }
        else
        {
            <p>Able to play in the following games as player</p>
            @foreach (var registry in _gameRegistries)
            {
                @registry.Name<br />
                @foreach (var row in registry.Players)
                {
                    <p>
                        @row.Player
                        @if (registry.GameState > GameStates.NoGame && (_gameUser.HasRole(UserRoles.Admin) || row.Email == _gameUser.Email))
                        {
                            <button class="btn btn-outline-success" @onclick="@(e => NavigateToGame(e, row))">Go To @row.GameId as @row.Player</button>
                        }
                    </p>
                 }
                <hr/>
            }
        }
    </Authorized>
    <NotAuthorized>
        <a href="MicrosoftIdentity/Account/SignIn">Log in before playing.</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private HubConnection _hubConnection;
    private List<GamePlayer> _runningGames = new List<GamePlayer>();
    private List<GameRegistry> _gameRegistries = new List<GameRegistry>();
    private string _newGameName = "game1";
    private string _newGameAdmin = "";
    private string _selectedGame;
    private int _nrPlayers = 4;
    private string _gameInfo;
    private GameSettings _settings;
    private GameUser _gameUser;
    private string _token;

    protected override async Task OnInitializedAsync()
    {
        _settings = gameSettings.Value;
        _gameUser = new GameUser(GetUserEmail().Result, IsSystemAdmin(), IsGameController());

        _hubConnection = new HubConnectionBuilder()
        .WithUrl(_settings.GameHubUrl, options =>
        {
            options.AccessTokenProvider = GetAccessToken;
        })
        .WithAutomaticReconnect()
        .Build();

        _hubConnection.On<List<GameRegistry>>("ReturnRunningGames", (GameRegistries) =>
        {
            _gameRegistries = GameRegistries;
            _gameUser = new GameUser(GetUserEmail().Result, IsSystemAdmin(), IsGameController());
            StateHasChanged();
        });

        _hubConnection.On<List<GameRegistry>>("NewGameRegistryCreated", (GameRegistries) =>
        {
            _gameRegistries = GameRegistries;
            StateHasChanged();
        });

        _hubConnection.On<List<GameRegistry>>("PlayersShuffled", (GameRegistries) =>
        {
            _gameRegistries = GameRegistries;
            StateHasChanged();
        });

        _hubConnection.On<List<GameRegistry>>("GameRegistryRemoved", (gameRegistries) =>
        {
            _gameRegistries = gameRegistries;
            StateHasChanged();
        });

        _hubConnection.On<List<GameRegistry>>("NewGameCreated", (gameRegistries) =>
        {
            _gameRegistries = gameRegistries;
            StateHasChanged();
        });

        _hubConnection.On<List<GameRegistry>>("GameRemoved", (gameRegistries) =>
        {
            _gameRegistries = gameRegistries;
            StateHasChanged();
        });

        _hubConnection.On<List<GamePlayer>>("CurrentRoundResetted", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        _hubConnection.On<List<GamePlayer>>("GameResetted", (gamePlayers) =>
        {
            _runningGames = gamePlayers;
            StateHasChanged();
        });

        _hubConnection.On<string>("GameSettings", (gameInfo) =>
        {
            _gameInfo = gameInfo;
            StateHasChanged();
        });



        _hubConnection.On<List<GameRegistry>>("SavedGamePlayer", (gameRegistries) =>
        {
            _gameRegistries = gameRegistries;
            StateHasChanged();
        });



        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            try
            {
                var _token = await GetAccessToken();
                await _hubConnection.StartAsync();
                await GetRunningGames();
            }
            catch (Exception ex)
            {
                var msg = ex.Message;
                throw;
            }
        }
    }

    private void ShowAccessToken()
    {
        _gameInfo = _token;
        StateHasChanged();
    }

    private async Task<string> GetAccessToken()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        var token = "";
        if (user.Identity.IsAuthenticated)
        {
            try
            {
                var initialScopes = configuration.GetValue<string>("DownstreamApi:Scopes")?.Split(' ');
                var userflow = configuration.GetValue<string>("AzureAdB2C:SignUpSignInPolicyId");
                token = await tokenHandler.GetAccessTokenForUserAsync(initialScopes);
            }
            catch (Exception)
            {
                //ConsentHandler.HandleException(ex);
                NavigationManager.NavigateTo("MicrosoftIdentity/Account/SignOut");
            }
        }
        _token = token;
        return token;
    }

    private async Task NewGameRegistry()
    {
        await _hubConnection.SendAsync("NewGameRegistry", _newGameName, _newGameAdmin, _nrPlayers);
    }

    private async Task RemoveGameRegistry()
    {
        await _hubConnection.SendAsync("RemoveGameRegistry", _selectedGame);
    }

    private async Task ShufflePlayers()
    {
        await _hubConnection.SendAsync("ShufflePlayers", _selectedGame);
    }

    private async Task NewGame()
    {
        await _hubConnection.SendAsync("NewGame", _selectedGame);
    }

    private async Task ResetGame()
    {
        await _hubConnection.SendAsync("ResetGame", _selectedGame);
    }

    private async Task RemoveGame()
    {
        await _hubConnection.SendAsync("RemoveGame", _selectedGame);
    }

    private async Task ResetCurrentRound()
    {
        var gameId = _gameRegistries.First(g => g.id == _selectedGame).Name;
        await _hubConnection.SendAsync("ResetCurrentRound", gameId);
    }



    private async Task GetGameSettings()
    {
        await _hubConnection.SendAsync("GetGameSettings", _selectedGame);
    }

    private async Task SaveGameSettings()
    {
        var settings = _gameInfo;
        await _hubConnection.SendAsync("SaveGameSettings", _selectedGame, settings);
    }

    private async Task GameSavedToDB()
    {
        await _hubConnection.SendAsync("SaveGameToDb", _selectedGame);
    }

    private async Task GetRunningGames()
    {
        await _hubConnection.SendAsync("GetRunningGames");
    }

    private void SavePlayer(MouseEventArgs e, GamePlayer gamePlayer)
    {
        _hubConnection.SendAsync("SaveGamePlayer", gamePlayer);
    }

    private void NavigateToGame(MouseEventArgs e, GamePlayer gamePlayer)
    {
        NavigationManager.NavigateTo(String.Format("/BoerenBridge/{0}/{1}", gamePlayer.GameId, gamePlayer.Player));
    }



    #region Internal functions

    private async Task<string> GetUserEmail()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var email = ((System.Security.Claims.ClaimsIdentity)user.Identity).Claims.FirstOrDefault(c => c.Type == "emails");
            if (email != null)
                return email.Value;
            else
                return null;
        }
        else
        {
            return null;
        }
    }

    private bool IsGameController()
    {
        if (_runningGames != null && _gameUser != null)
        {
            var isController = _runningGames.Any(p => p.Email == _gameUser.Email && p.IsGameAdmin);
            return isController;
        }
        else
        {
            return false;
        }
    }

    private bool IsSystemAdmin()
    {
        if (_gameUser != null)
        {
            var isAdmin = _gameUser.Email == _settings.SystemAdmin;
            return isAdmin;
        }
        else
        {
            return false;
        }
    }

    private string ShowFor(UserRoles role)
    {
        return _gameUser.HasRole(role) ? "inline" : "none";
    }

    #endregion

    internal class GameUser
    {
        private string _email;
        private bool _isSystemAdmin;
        private bool _isController;

        internal GameUser(string email, bool isAdmin, bool isController)
        {
            _email = email;
            _isSystemAdmin = isAdmin;
            _isController = isController;
        }

        internal string Email
        {
            get
            {
                return _email;
            }
        }

        internal bool IsSystemAdmin
        {
            get
            {
                return _isSystemAdmin;
            }
        }

        internal bool IsGameController
        {
            get
            {
                return _isController;
            }
        }

        internal bool HasRole(UserRoles role)
        {
            switch (role)
            {
                case UserRoles.Admin:
                    return _isSystemAdmin;
                case UserRoles.Controller:
                    return _isController;
                case UserRoles.AdminOrController:
                    return (_isController || _isSystemAdmin);
                case UserRoles.User:
                    return (!_isController && !_isSystemAdmin);
                default:
                    return false;
            }
        }
    }
}

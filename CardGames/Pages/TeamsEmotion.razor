@page "/TeamsEmotion"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections;
@using BlazorSignalRApp.Shared.Models;
@inject NavigationManager NavigationManager

<style>
    fieldset.scheduler-border {
        border: 1px groove #ddd !important;
        padding: 0 1.4em 1.4em 1.4em !important;
        margin: 0 0 1.5em 0 !important;
        -webkit-box-shadow: 0px 0px 0px 0px #000;
        box-shadow: 0px 0px 0px 0px #000;
        border-radius: 15px;
    }

    legend.scheduler-border {
        font-size: 2.2em !important;
        font-weight: bold !important;
        text-align: left !important;
        width: auto;
        padding: 0 10px;
        border-bottom: none;
    }

    div.gallery {
        margin: 5px;
        border: 1px solid #ccc;
        float: left;
        width: 120px;
        border-radius: 15px;
    }

        div.gallery:hover {
            border: 1px solid #808080;
        }

    div.desc {
        text-align: center;
    }
</style>

<div class="form-group">
    <label>
        User:
        <input @bind="_user" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="_messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<button @onclick="@(e => SendEmoji(e, "🙂"))">🙂</button>
<button @onclick="@(e => SendEmoji(e, "😷"))">😷</button>
<button @onclick="@(e => SendEmoji(e, "🥳"))">🥳</button>
<button @onclick="@(e => SendEmoji(e, "🤔"))">🤔</button>
<button @onclick="@(e => SendEmoji(e, "🤓"))">🤓</button>
<button @onclick="@(e => SendEmoji(e, "😂"))">😂</button>
<button @onclick="@(e => SendEmoji(e, "😥"))">😥</button>
<button @onclick="@(e => SendEmoji(e, "🙁"))">🙁</button>
<button @onclick="@(e => SendEmoji(e, "😴"))">😴</button>
<button @onclick="@(e => SendEmoji(e, "🤬"))">🤬</button>
<button @onclick="@(e => SendEmoji(e, "🤢"))">🤢</button>
<button @onclick="@(e => SendEmoji(e, "😱"))">😱</button>
<button @onclick="@(e => SendEmoji(e, "😍"))">😍</button>
<button @onclick="@(e => SendEmoji(e, "😵"))">😵</button>
<button @onclick="@(e => SendEmoji(e, "🙋‍"))">🙋‍</button>
<button @onclick="@(e => SendEmoji(e, "❓"))">❓</button>


<fieldset class="scheduler-border">
    <legend class="scheduler-border">@_teamId</legend>
    @foreach (var member in _members)
    {
    <div class="gallery">
        <div class="desc">
            <p style="font-size:500%">@member.Emoji</p>
            @member.Name<br />
        </div>
    </div>
    }
</fieldset>


<hr />
<ul id="messagesList">
    @foreach (var message in _messages)
    {
    <li>@message</li>
    }
</ul>

@code {
    private HubConnection _hubConnection;
    private List<string> _messages = new List<string>();
    private string _user;
    private string _messageInput;
    private List<Member> _members = new List<Member>();
    private string _teamId = "team1";

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            StateHasChanged();
        });

        _hubConnection.On<List<Member>>("ReceiveEmoji", (members) =>
        {
            _members = members;
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
        await _hubConnection.SendAsync("AddToGroup", _teamId);
    }

    Task SendEmoji(MouseEventArgs e, string emoji) =>
            _hubConnection.SendAsync("SendEmoji", _teamId,_user, emoji);

    Task Send() =>
        _hubConnection.SendAsync("SendMessage", _user, _messageInput);

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;
}

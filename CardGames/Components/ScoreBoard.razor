@using CardGames.Shared.Models
@using CardGames.Shared;

<div class="modal @modalClass" role="dialog" style="display: @modalDisplay; overflow: auto">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">ScoreBoard</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table class="table table-sm table-striped">
                    <thead>
                        <tr>
                            <td></td>
                            @foreach (var player in game.Players)
                            {
                                <td><p style="text-align: center; color: @(IsGameController(player.Id) ? "red" : "black")">@(player.Name == null ? player.Id : player.Name.Split(" ")[0])</p></td>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @for (int round = 0; round < game.Rounds.Length; round++)
                        {
                            <tr>
                                <td>
                                    @if (round < 8)
                                    {
                                        <b>@((round + 1).ToString())</b>
                                    }
                                    else
                                    {
                                        <b>@((16 - round).ToString())</b>
                                    }
                                </td>
                                @for (var playerIndex = 0; playerIndex < game.Players.Length; playerIndex++)
                                {
                                    var player = game.Players[playerIndex];
                                    @if (round < game.CurrentRound || game.GameOver)
                                    {
                                        <td style="background-color:@(game.Rounds[round].Winners[GameUtils.GetPlayerId(player.Id)] ? "green" : "red"); text-align:center">
                                            @(game.Rounds[round].Scores[GameUtils.GetPlayerId(player.Id)].ToString()) | 
                                            🎰@(game.Rounds[round].Bets[GameUtils.GetPlayerId(player.Id)].ToString())
                                            🏆@(game.Rounds[round].Wins[GameUtils.GetPlayerId(player.Id)].ToString())
                                        </td>
                                    }
                                    else
                                    {
                                        <td>@(game.Rounds[round].Scores[GameUtils.GetPlayerId(player.Id)].ToString())</td>
                                    }
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Game game { get; set; }
    [Parameter]
    public string selectedPlayer { get; set; }
    [Parameter]
    public string modalClass { get; set; }
    [Parameter]
    public string modalDisplay { get; set; }

    [Parameter]
    public EventCallback<int> OnCloseCallback { get; set; }


    private void Close()
    {

        OnCloseCallback.InvokeAsync(0);
    }

    private bool IsGameController()
    {
        return game.IsGameController(GameUtils.GetPlayerId(selectedPlayer));
    }

    private bool IsGameController(string player)
    {
        return game.IsGameController(GameUtils.GetPlayerId(player));
    }
}

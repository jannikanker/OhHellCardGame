@using CardGames.Shared.Models
@using CardGames.Shared;
@inject IStringLocalizer<UIStrings> L;

<div class="modal @modalClass" role="dialog" style="display: @modalDisplay; overflow: auto">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@L["LastPlayedCards"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="text-align:center">
                <table border="0">
                    <tr>
                        <td>Round</td>
                        <td>Card</td>
                        @foreach (var player in game.Players)
                        {

                            <td>
                                @(player.FirstName)
                            </td>
                        }
                    </tr>

                    @foreach (var gameRounds in game.Rounds)
                    {
                        foreach (var roundHistory in gameRounds.PlayHistory)
                        {
                            <tr>
                                <td></td>
                                <td></td>
                                @foreach (var playerCard in roundHistory)
                                {
                                    <td style="border:@(playerCard.Winner ? "dashed" : "medium")">
                                        <img src="/CardImages/@(playerCard.Card.Face.ToString() + ".png")" width="50" />
                                    </td>

                                }
                            </tr>
                        }
                    }
                </table>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Game game { get; set; }
    [Parameter]
    public string selectedPlayer { get; set; }
    [Parameter]
    public string modalClass { get; set; }
    [Parameter]
    public string modalDisplay { get; set; }

    [Parameter]
    public EventCallback<int> OnCloseCallback { get; set; }

    private void Close()
    {
        OnCloseCallback.InvokeAsync(0);
    }
}

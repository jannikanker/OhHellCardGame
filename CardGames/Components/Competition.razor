@using CardGames.Shared.Models
@using CardGames.Shared;
@using System.Globalization;
@using System.Collections;

<div class="modal @modalClass" role="dialog" style="display: @modalDisplay; overflow: auto">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Competition (9-6-3-0)</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="text-align:center">
                @foreach (var competition in CreateCompetitionPositions())
                {
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <td align="center">Competition</td>
                                <td align="center">1e</td>
                                <td align="center">2e</td>
                                <td align="center">3e</td>
                                <td align="center">4e</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td align="left">@competition.Key</td>
                                    @foreach (var position in (List<KeyValuePair<object,object>>) competition.Value)
                                    {
                                        <td align="center">@position.Key.ToString() (@position.Value.ToString())</td>
                                    }

                            </tr>
                        </tbody>
                    </table>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public List<GameScore> topScores { get; set; }
    [Parameter]
    public string modalClass { get; set; }
    [Parameter]
    public string modalDisplay { get; set; }
    [Parameter]
    public string gameId { get; set; }

    [Parameter]
    public EventCallback<int> OnCloseCallback { get; set; }

    protected List<KeyValuePair<object,object>> CreateCompetitionPositions()
    {

        var competitions = new Hashtable();
        var players = topScores.Where(g => g.Id == gameId).GroupBy(g => g.FirstName);


        foreach (var competition in topScores.Where(c => c.Id == gameId).GroupBy(c => c.CompetitionId))
        {
            var positions = new Hashtable();
            foreach(var p in players)
            {
                positions.Add(p.Key, 0);
            }

            foreach (var game in topScores.Where(g => g.Id == gameId && g.CompetitionId == competition.Key).OrderByDescending(g => g.GameOverDateTime).GroupBy(g => g.GameOverDateTime))
            {
                int i = 1;
                foreach (var score in topScores.Where(g => g.GameOverDateTime == game.Key).OrderByDescending(g => g.Score))
                {
                    positions[score.FirstName] = (int)positions[score.FirstName] + (4 - i) * 3;
                    i++;
                }
            }
            //sort
            var pos = positions.Cast < DictionaryEntry > ()
                          .ToDictionary(d => d.Key, d => d.Value)
                          .OrderByDescending(e => e.Value);
            competitions.Add(competition.Key, pos.ToList());
        }

        var comp = competitions.Cast<DictionaryEntry>()
                .ToDictionary(d => d.Key, d => d.Value);

        return comp.ToList();
    }

    private void Close()
    {
        OnCloseCallback.InvokeAsync(0);
    }
    
}
